package cn.qtone.FileSystem.test;

import java.io.File;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.List;

import org.apache.hadoop.io.IOUtils;

import cn.qtone.FileSystem.Hadoop;
import cn.qtone.FileSystem.HadoopFSO;

public class ThreadhadoopTest extends Hadoop implements Runnable{


	//////////////////////多线程测试用例//////////////////////////////

	private List<String> filelist = new ArrayList<String>();
	private int threadid = 0;
	private int opt =0;
	private long const_time_read = 0;
	private long const_time_write = 0;
	
	@Override
	public void run() {
		if(opt==0){
			const_time_read = 0;
			for(String fs : filelist){
				long curr = System.currentTimeMillis();
				String rest = null;
				try{
					rest = new HadoopFSO().createHdfsFile(fs);
				}catch(Exception e){
					e.printStackTrace();
				}finally{

				}
				if(rest==null)
					System.out.println("FAILURE : " + fs);
				System.out.print(".");
				const_time_read = const_time_read + (System.currentTimeMillis()-curr);
			}
			System.out.println("\nwrite \t" + this.threadid +"\t cost \t " + const_time_read);			
		}else{
			const_time_write = 0;
			for(String fs : filelist){
				String localname = getRamdomFileName(fs);
				try{
					long curr = System.currentTimeMillis();
					InputStream in = new HadoopFSO().getHDFSFileInputStream(fs);
					if(in==null)
						System.out.println("FAILURE : " + fs);
					System.out.print(".");
					const_time_write = const_time_write + (System.currentTimeMillis()-curr);
					File f = new File("/tmp/" + localname);
					OutputStream out = new FileOutputStream(f);
					IOUtils.copyBytes(in, out, 256*1024);
					in.close();
					out.close();
				}catch(Exception e){
					e.printStackTrace();
				}
			}
			System.out.println("\nread \t" + this.threadid +"\t cost \t " + const_time_write);
		}
	}
	public ThreadhadoopTest(List<String> list,int id,int opts){
		this.filelist = list;
		this.threadid = id;
		this.opt = opts;
	}
	
	public static void main(String[] args) throws Exception {
		String a = new HadoopFSO().createHdfsFile("c:\\P1005.log",true);
		System.out.println(a);
	}

	public static void mainThread(String[] args) throws Exception {
		//ArrayList<String> ral = MyUtil.stringToArrayList("/201205/31/1338428626041978.jpg,/201205/31/1338428626043603.jpg,/201205/31/1338428626063026.jpg,/201205/31/1338428626063148.jpg,/201205/31/1338428626383054.jpg,/201205/31/1338428627374032.jpg,/201205/31/1338428630664651.jpg,/201205/31/1338428631239724.jpg,/201205/31/1338428631831474.jpg,/201205/31/1338428631902636.jpg,/201205/31/1338428632030331.jpg,/201205/31/1338428632050522.jpg,/201205/31/1338428632119598.jpg,/201205/31/1338428632216841.jpg,/201205/31/1338428632618423.jpg,/201205/31/1338428632647656.jpg,/201205/31/1338428632692668.jpg,/201205/31/1338428633056600.jpg,/201205/31/1338428633066344.jpg,/201205/31/1338428633107961.jpg,/201205/31/1338428633124050.jpg,/201205/31/1338428633574690.jpg,/201205/31/1338428633583345.jpg,/201205/31/1338428633652139.jpg,/201205/31/1338428633665398.jpg,/201205/31/1338428633913185.jpg,/201205/31/1338428634219787.jpg,/201205/31/1338428634228791.jpg,/201205/31/1338428634269021.jpg,/201205/31/1338428634294520.jpg,/201205/31/1338428634314567.jpg,/201205/31/1338428695719309.jpg,/201205/31/1338428695736613.jpg,/201205/31/1338428695743403.jpg,/201205/31/1338428695745788.jpg,/201205/31/1338428697472615.jpg,/201205/31/1338428697485896.jpg,/201205/31/1338428697607581.jpg,/201205/31/1338428697709949.jpg,/201205/31/1338428697711755.jpg,/201205/31/1338428697737679.jpg,/201205/31/1338428697766097.jpg,/201205/31/1338428698383861.jpg,/201205/31/1338428698398012.jpg,/201205/31/1338428698815550.jpg,/201205/31/1338428698873325.jpg,/201205/31/1338428698877772.jpg,/201205/31/1338428699272824.jpg,/201205/31/1338428699718478.jpg,/201205/31/1338428699777273.jpg,/201205/31/1338428699777369.jpg,/201205/31/1338428700477503.jpg,/201205/31/1338428700499622.jpg,/201205/31/1338428700516504.jpg,/201205/31/1338428700562851.jpg,/201205/31/1338428701720540.jpg,/201205/31/1338428701734622.jpg,/201205/31/1338428702069248.jpg,/201205/31/1338428702642870.jpg,/201205/31/1338428704661176.jpg,/201205/31/1338428706588175.jpg,/201205/31/1338428706601149.jpg,/201205/31/1338428834623149.jpg,/201205/31/1338428834623488.jpg,/201205/31/1338428834641629.jpg,/201205/31/1338428834641753.jpg,/201205/31/1338428834792937.jpg,/201205/31/1338428834808190.jpg,/201205/31/1338428834862695.jpg,/201205/31/1338428834878249.jpg,/201205/31/1338428834952393.jpg,/201205/31/1338428834953481.jpg,/201205/31/1338428834957297.jpg,/201205/31/1338428835060556.jpg,/201205/31/1338428835062916.jpg,/201205/31/1338428835134156.jpg,/201205/31/1338428835140619.jpg,/201205/31/1338428835205126.jpg,/201205/31/1338428835210253.jpg,/201205/31/1338428835298010.jpg,/201205/31/1338428835306876.jpg,/201205/31/1338428835306977.jpg,/201205/31/1338428835420763.jpg,/201205/31/1338428835426087.jpg,/201205/31/1338428835517013.jpg,/201205/31/1338428835519394.jpg,/201205/31/1338428835626869.jpg,/201205/31/1338428835629338.jpg,/201205/31/1338428835712892.jpg,/201205/31/1338428835721481.jpg,/201205/31/1338428835819785.jpg,/201205/31/1338428835824657.jpg,/201205/31/1338428836165641.jpg,/201205/31/1338428900273677.jpg,/201205/31/1338428900487470.jpg,/201205/31/1338428900568672.jpg,/201205/31/1338428900644246.jpg,/201205/31/1338428900728367.jpg,/201205/31/1338428900788770.jpg,/201205/31/1338428900865215.jpg,/201205/31/1338428900923511.jpg,/201205/31/1338428900986536.jpg,/201205/31/1338428901070395.jpg,/201205/31/1338428901133141.jpg,/201205/31/1338428901209690.jpg,/201205/31/1338428901265345.jpg,/201205/31/1338428901318976.jpg,/201205/31/1338428901400780.jpg,/201205/31/1338428901475865.jpg,/201205/31/1338428901570921.jpg,/201205/31/1338428901640586.jpg,/201205/31/1338428901710734.jpg,/201205/31/1338428901809720.jpg,/201205/31/1338428901899618.jpg,/201205/31/1338428901945182.jpg,/201205/31/1338428902793790.jpg,/201205/31/1338428903018232.jpg,/201205/31/1338428903143641.jpg,/201205/31/1338428903264687.jpg,/201205/31/1338428903380460.jpg,/201205/31/1338428903461457.jpg,/201205/31/1338428903571260.jpg,/201205/31/1338428903670891.jpg,/201205/31/1338428903807797.jpg,/201205/31/1338428986099592.jpg,/201205/31/1338428986101896.jpg,/201205/31/1338428986105456.jpg,/201205/31/1338428986111334.jpg,/201205/31/1338428986347138.jpg,/201205/31/1338428986363148.jpg,/201205/31/1338428986442754.jpg,/201205/31/1338428986452290.jpg,/201205/31/1338428986488660.jpg,/201205/31/1338428986536849.jpg,/201205/31/1338428986553716.jpg,/201205/31/1338428986564977.jpg,/201205/31/1338428986634595.jpg,/201205/31/1338428986711714.jpg,/201205/31/1338428986756863.jpg,/201205/31/1338428986774404.jpg,/201205/31/1338428986794278.jpg,/201205/31/1338428987843464.jpg,/201205/31/1338428987843540.jpg,/201205/31/1338428987861424.jpg,/201205/31/1338428987861647.jpg,/201205/31/1338428988052384.jpg,/201205/31/1338428988258253.jpg,/201205/31/1338428988269023.jpg,/201205/31/1338428988322035.jpg,/201205/31/1338428988484357.jpg,/201205/31/1338428988698560.jpg,/201205/31/1338428988728749.jpg,/201205/31/1338428993945427.jpg,/201205/31/1338428993945584.jpg,/201205/31/1338428993964086.jpg,/201205/31/1338428993964648.jpg,/201205/31/1338428994103407.jpg,/201205/31/1338428994123423.jpg,/201205/31/1338428994219480.jpg,/201205/31/1338428994245777.jpg,/201205/31/1338428994260306.jpg,/201205/31/1338428994303399.jpg,/201205/31/1338428994367837.jpg,/201205/31/1338428994373089.jpg,/201205/31/1338428994382949.jpg,/201205/31/1338428994485565.jpg,/201205/31/1338428994486347.jpg,/201205/31/1338428994509965.jpg,/201205/31/1338428994554651.jpg,/201205/31/1338428994588867.jpg,/201205/31/1338428994655848.jpg,/201205/31/1338428994679040.jpg,/201205/31/1338428994699132.jpg,/201205/31/1338428994719519.jpg,/201205/31/1338428994738517.jpg,/201205/31/1338428994807235.jpg,/201205/31/1338428994879889.jpg,/201205/31/1338428994905113.jpg,/201205/31/1338428994943779.jpg,/201205/31/1338428995232151.jpg,/201205/31/1338428995437029.jpg,/201205/31/1338428995440349.jpg,/201205/31/1338428995550373.jpg", ",");
		File f = new File(args[0]);
		int pm = Integer.parseInt(args[1]);
		//String testRead = args[2];
		ArrayList<String> al = fetchdir(f);
		//System.out.println(al);
		int pmax = pm;
		if(al.size()>10){
			for(int i=0;i<al.size();i=i+pmax){
				int max = ((i+pmax)>al.size()?al.size():(i+pmax));
				new Thread(new ThreadhadoopTest(al.subList(i, max),i,0)).start();
				//new Thread(new HadoopFSO(ral.subList(i, max),i,1)).start();
				//List<String> su = al.subList(i, max);
				//System.out.println(su);
			}
		}
		f = null;
	}

	private static ArrayList<String> fetchdir(File f) throws Exception {
		ArrayList<String> ret = new ArrayList<String>();
		File[] list = f.listFiles();
		for(File fs : list){
			if(fs.isDirectory()){
				//System.out.println((p==null?"":p.getName()+"___")+ fs.getParentFile().getName()+"___"+fs.getName());
				ret.addAll(fetchdir(fs));
			}else{
				ret.add(fs.getAbsolutePath());
				//System.out.print(fs.getAbsolutePath());
				//String rest = createHdfsFile(fs.getAbsolutePath());
				//if(rest==null)
				//	System.out.println("FAILURE : " + fs.getAbsolutePath());
				//System.out.print(".");
				//System.out.println((p==null?"":p.getName()+"___")+ fs.getParentFile().getName()+"___"+fs.getName());
			}

		}
		return ret;
	}
	//////////////////////多线程测试用例////////////////////////
	
}
